Statement: Provided a list of time intervals when students need laptops, return the minimum number of laptops that are needed. 
So, no two overlapping intervals share the same laptop.
Input: a list of n intervals, where each interval is a 2-tuple (start, end) with 0<=start<end, showing the time when a student needs a laptop
Output: an integer k that represents the minimum number of non-overlapping laptops that are needed 

function min_rentals(times):
    times.sort by first element
    min_heap ← []

    for start, end in times:
        if min_heap is not empty and start >= min_heap[0]:
            heappop(min_heap) # remove the smallest end time value from min-heap
        end if
        heappush(min_heap, end) # add end to min-heap
    end for

    return length(min_heap)

end function
